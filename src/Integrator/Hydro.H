#ifndef INTEGRATOR_HYDRO_H
#define INTEGRATOR_HYDRO_H

#include <string>
#include <limits>
#include <memory>

#include "Integrator/Integrator.H"
#include "IO/ParmParse.H"

#include "BC/BC.H"
#include "BC/Constant.H"
#include "IC/IC.H"

#include "IC/Sphere.H"
#include "IC/Constant.H"
#include "IC/Laminate.H"
#include "IC/Expression.H"

namespace Integrator
{
class Hydro : virtual public Integrator::Integrator
{
public:

    Hydro() {};
    Hydro(IO::ParmParse& pp);
    static void Parse(Hydro& value, IO::ParmParse& pp);

protected:
    void Initialize(int lev) override;
    void TimeStepBegin(Set::Scalar a_time, int a_iter) override;
    void TimeStepComplete(Set::Scalar time, int lev) override;
    void Advance(int lev, Set::Scalar time, Set::Scalar dt) override;
    void TagCellsForRefinement(int lev, amrex::TagBoxArray& tags, amrex::Real /*time*/, int /*ngrow*/) override;
    void Regrid(int lev, Set::Scalar time) override;
    //void Integrate(int amrlev, Set::Scalar time, int step, const amrex::MFIter &mfi, const amrex::Box &box) override;
    //virtual void UpdateModel(int a_step);
private:

    Set::Field<Set::Scalar> Density_mf;
    Set::Field<Set::Scalar> Density_old_mf;

    Set::Field<Set::Scalar> Energy_mf;
    Set::Field<Set::Scalar> Energy_old_mf;

    Set::Field<Set::Scalar> Momentum_mf;
    Set::Field<Set::Scalar> Momentum_old_mf;

    Set::Field<Set::Scalar> Velocity_mf;

    Set::Field<Set::Scalar> Pressure_mf;

    Set::Field<Set::Scalar> eta_mf;
    Set::Field<Set::Scalar> etadot_mf;

    BC::BC<Set::Scalar>* bc_rho;
    BC::BC<Set::Scalar>* bc_E;
    BC::BC<Set::Scalar>* bc_M;
    BC::BC<Set::Scalar>* bc_v;
    BC::BC<Set::Scalar>* bc_p;
    BC::BC<Set::Scalar>* bc_eta;

    IC::IC* ic_rho;
    IC::IC* ic_E;

    IC::IC* ic_M;

    IC::IC* ic_eta;
    IC::IC* ic_etadot;

    Set::Scalar c_max = 0.0;
    Set::Scalar vx_max = 0.0;
    Set::Scalar vy_max = 0.0;

    Set::Scalar r_refinement_criterion, e_refinement_criterion, m_refinement_criterion, eta_refinement_criterion;
    Set::Scalar gamma, cfl;
    Set::Scalar rho_solid, rho_fluid, E_solid, E_fluid, Mx_init, My_init;
    Set::Scalar num_cells_x, eps, mdot, Pdot_x, Pdot_y, Qdot, V;

};
}

#endif
