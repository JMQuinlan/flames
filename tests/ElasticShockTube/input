#alamo.program = mechanics
alamo.program.mechanics.model = affine.isotropic

plot_file		    = tests/ElasticShockTube/output

type=dynamic

# this is not a time integration, so do
# exactly one timestep and then quit
timestep		    = 0.005
stop_time		    = 400.0
#stop_time		    = 10
#timestep		    = 0.0
#amr.max_iter = 10

# amr parameters
#amr.plot_int		    = 100
amr.plot_dt		    = 1
#amr.plot_int		    = 1
#amr.max_level		    = 5
amr.max_level		    = 1 #2
#amr.n_cell		    = 32 32 32
#amr.n_cell		    = 128 32
#amr.n_cell		    = 256 64 256
#namr.n_cell		    = 512 128 512
#amr.n_cell		    = 512 128 512
amr.blocking_factor	    = 8
amr.regrid_int		    = 100
amr.grid_eff		    = 1.0
amr.cell.all                = 1

# geometry
#geometry.prob_lo	    = -16 -4 -8 
#geometry.prob_hi	    = 16 4 8
geometry.is_periodic	    = 0 0 0

#amr.n_cell		    = 512 192 512
#amr.n_cell		    = 256 96 256
#geometry.prob_lo	    = -16 -6 -8 
#geometry.prob_hi	    = 16 6 8
amr.n_cell		    = 128 8 18
geometry.prob_lo	    = 0 -1 -1
geometry.prob_hi	    = 32 1  1



# ellipse configuration
#ic.type        = ellipse
#ic.ellipse.a   = 1.0 0.75 0.5  # ellipse radii
#ic.ellipse.x0  = 0 0 0 # location of ellipse center
#ic.ellipse.eps = 0.1 # diffuse boundary

#ic.type = expression
#ic.expression.constant.L = 1.0
#ic.expression.constant.eps = 0.1
#ic.expression.region0 = "(0.5*(1+tanh(L/eps-abs(y/eps))))"
#ic.expression.region1 = "1-(0.5*(1+tanh(L/eps-abs(y/eps))))"

ic.type = constant
ic.constant.value = 1.0


# elastic moduli
nmodels = 1
model1.E = 1.1 
model1.nu = 0.3
#model1.sigma0=0.5
#model1.hardening=15
#model1.ratecoeff=0.5



#ref_threshold = 1000000000

viscous.mu = 0
viscous.mu2 = 0.05

#bc.type = expression
#bc.expression.type.xlo = trac trac trac
#bc.expression.val.xlo =  "6.0*(t<2)" "0.0"
#bc.expression.type.xhi = trac trac trac
#bc.expression.type.ylo = trac disp trac
#bc.expression.type.yhi = trac disp trac
#bc.expression.type.xloylo = trac disp disp
#bc.expression.type.xloyhi = trac disp disp
#bc.expression.type.xhiylo = trac disp disp
#bc.expression.type.xhiyhi = trac disp disp

bc.type = expression

## displacement ##
#bc.expression.type.xlo     = disp trac trac
#bc.expression.type.xloyhi  = disp disp trac
#bc.expression.type.xloylo  = disp disp trac
#bc.expression.val.xlo      = "0.001"  "0" #"0.0" "- 0.0 * (t < 2) * (x < 20) * (x > -20)"
#bc.expression.val.xloylo   = "0.001"  "0"
#bc.expression.val.xloyhi   = "0.001"  "0"

## traction ##
bc.expression.type.xlo     = trac trac disp
bc.expression.type.xloyhi  = trac disp trac
bc.expression.type.xloylo  = trac disp trac
#bc.expression.val.xlo      = "1.0*(t<4)"  "0"
#bc.expression.val.xloylo   = "1.0*(t<4)"  "0"
#bc.expression.val.xloyhi   = "1.0*(t<4)"  "0"

bc.expression.type.ylo = trac disp 
bc.expression.type.yhi = trac disp 

tmp_fac = 1.0

velocity.ic.type = expression
velocity.ic.expression.region0 = "10.0*(x<4)"
#velocity.ic.expression.region0 = "0.0"
velocity.ic.expression.region1 = "0.0"
bc.expression.type.xhi     = trac trac disp
bc.expression.type.xhiyhi  = trac disp trac
bc.expression.type.xhiylo  = trac disp trac


#bc.expression.type.xhi = trac trac trac
#bc.expression.val.xhi = "6.0*(t<2)" "0.0"


time_evolving = 0


# Elastic refinement criterion
ref_threshold = 0.1
eta_ref_threshold = 10.1
eta_reset_on_regrid = 1

#bc.type = constant
#bc.constant.type.xlo = disp trac trac
#bc.constant.type.xhi = disp trac trac
#bc.constant.val.xhi = 0.1 0.0 0.0
#bc.constant.type.ylo = trac disp trac
#bc.constant.type.yhi = trac disp trac
#bc.constant.type.xloylo = disp trac trac
#bc.constant.type.xloyhi = disp trac trac
#bc.constant.type.xhiylo = disp disp trac
#bc.constant.type.xhiyhi = disp disp trac
#bc.constant.val.xhiylo = 0.1 0.0 0.0
#bc.constant.val.xhiyhi = 0.1 0.0 0.0
