alamo.program = hydro

### OUTPUT ###

# plot_file = ./output
### On Incline, use the high-speed storage
#plot_file = /mmfs1/home/USERNAME/alamo_data/output
# Specifically for JMQ:
plot_file = /mmfs1/home/jquinlan/alamo_data/VortexShed_x_Large/output_mpi_lev_4_ReCheck

### MESHING ###

amr.plot_dt = 0.024
#amr.plot_int = 1000
amr.max_grid_size = 500000
amr.blocking_factor = 2
amr.regrid_int = 100
amr.grid_eff = 0.8

### With these settings, 3 levels of refinement or more are needed to get von Karmann vortex street
### and 4 levels is a little better, but slower
amr.max_level = 4
timestep  = 1.0e-3
#amr.n_cell = 256 128
amr.n_cell = 128 32

# Uncomment to test AMR
#amr.max_level = 2
#amr.n_cell = 128 32 0

### DIMENSIONS ###

geometry.prob_lo = -24.0 -12.0 0.0 # [ m ]
geometry.prob_hi =  72.0  12.0 0.0 # [ m ]

geometry.is_periodic = 0 0 0

### TIME STEP ###

stop_time = 240.0

### ETA IC ###

rhoInterface.ic.type = expression
rhoInterface.ic.expression.region0 = "0.0"

vInjected.ic.type = expression
vInjected.ic.expression.region0 = "0.0"
vInjected.ic.expression.region1 = "0.0"

q.ic.type = expression
q.ic.expression.region0 = "0.0"
q.ic.expression.region1 = "0.0"

Ldot_active = 0.0

eta.ic.type = expression
eta.ic.expression.constant.eps   = 0.25
eta.ic.expression.constant.vel_x = 0.0 
eta.ic.expression.constant.vel_y = 0.0 
eta.ic.expression.constant.x0    = 0.0 
eta.ic.expression.region0        = "(1.0 - 0.5*tanh((sqrt((x-x0)**2 + (y)**2) + 1.0)/eps) + 0.5*tanh((sqrt((x-x0)**2 + (y)**2) - 1.0)/eps))"

### HYDRO PARAM ###

gamma = 1.4
cfl   = 0.6
mu    = 0.6

Density.ic.type = expression
Density.ic.expression.region0 = "1.2" 

SolidDensity.ic.type = expression
SolidDensity.ic.expression.region0 = "1.2" 

SolidVelocity.ic.type = expression
SolidVelocity.ic.expression.region0 = "0.0" 
SolidVelocity.ic.expression.region1 = "0.0" 

Velocity.ic.type = expression
Velocity.ic.expression.region0 = "35.0"
Velocity.ic.expression.region1 = "0.0"

Pressure.ic.type = expression
Pressure.ic.expression.region0 = "103320.0"

### ETA BC  ###

pf.eta.bc.type.xlo = neumann
pf.eta.bc.type.xhi = neumann
pf.eta.bc.type.ylo = neumann
pf.eta.bc.type.yhi = neumann
pf.eta.bc.type.zlo = neumann
pf.eta.bc.type.zhi = neumann

pf.eta.bc.val.xlo = 0.0
pf.eta.bc.val.xhi = 0.0
pf.eta.bc.val.ylo = 0.0
pf.eta.bc.val.yhi = 0.0
pf.eta.bc.val.zlo = 0.0
pf.eta.bc.val.zhi = 0.0

### HYDRO BC ###

rho.bc.type.xhi = neumann
rho.bc.type.xlo = dirichlet
rho.bc.type.ylo = neumann
rho.bc.type.yhi = neumann

rho.bc.val.xhi = 0.0
rho.bc.val.xlo = 1.2
rho.bc.val.ylo = 0.0 
rho.bc.val.yhi = 0.0

p.bc.type.xhi = dirichlet
p.bc.type.xlo = neumann
p.bc.type.ylo = neumann
p.bc.type.yhi = neumann

p.bc.val.xhi = 103320.0
p.bc.val.xlo = 0.0
p.bc.val.ylo = 0.0 
p.bc.val.yhi = 0.0

v.bc.type.xhi = neumann neumann
v.bc.type.xlo = dirichlet dirichlet
v.bc.type.ylo = neumann dirichlet
v.bc.type.yhi = neumann dirichlet
v.bc.val.xhi = 0.0 0.0
v.bc.val.xlo = 35.0 0.0
v.bc.val.ylo = 0.0 0.0
v.bc.val.yhi = 0.0 0.0

### HYDRO REFINEMENT CRITERIA ###

r_refinement_criterion   = 1.1
e_refinement_criterion   = 1.1
m_refinement_criterion   = 1.1
eta_refinement_criterion = 1.1
omega_refinement_criterion = 0.55

#TODO
